AWSTemplateFormatVersion: "2010-09-09"
Description: Main Stack for QS Chatbot
Parameters:
  S3Name:
    Type: String
    Default: "quintic-chatbot-code"
    Description: S3 code location
  OpenApiKey:
    Type: String
    Description: OpenAI API key
  DeploymentPackageKey:
    Type: String
    Description: Code zipped s3 path
Resources:
  ChatbotPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: "*"
          - Effect: Allow
            Action:
              - apigateway:*
            Resource: "*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:api-secret"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 
              - !Sub arn:aws:s3:::${S3Name}/${DeploymentPackageKey}
  ChatbotIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref ChatbotPolicy
      Path: "/"
  ChatBotLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3Name
        S3Key: !Ref DeploymentPackageKey
      Role: !Ref ChatbotIAMRole
  ChatBotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChatBotApi
  ChatBotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatBotApi
      ParentId: !GetAtt 
        - ChatBotApi
        - RootResourceId
      PathPart: chatbot
  ChatBotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatBotApi
      ResourceId: !Ref ChatBotResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn: !GetAtt ChatBotLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{"statusCode": 200}'
